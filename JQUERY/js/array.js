/* 

var arr = array(); создает пустой массив
var arr = []; и снова создает пустой массив
var arr = array(5); создает массив из пяти элементов
var arr = [10]; создает массив из одного элемента - числа 10
var arr = array(6, "my text", 17); создает массив из трех элементов, двух чисел и строки
var arr = [6, "my text", 17]; аналогично предыдущему

Array() это быстрая операция с постоянным временем, которая не выделяет память, 
тогда как [] - это операция с линейным временем, которая устанавливает тип и значение.
var points = new Array();  // Bad
var points = [];           // Good 

Вам никогда не нужно использовать new Object() в JavaScript. Вместо этого используйте литерал объекта {}. 
Аналогично, не используйте new Array(), вместо этого используйте литерал массива []. 
Массивы в JavaScript работают не так, как массивы в Java, и использование синтаксиса, подобного Java, смутит вас.

Не используйте new Number, new String или new Boolean. 
Эти формы создают ненужные обертки объектов. Просто используйте простые литералы.

Также проверьте комментарии - new Array(length) форма new Array(length) не служит какой-либо полезной цели (по крайней мере, в сегодняшних реализациях JavaScript).

*/


$(function(){

    var arr1 = [];
    var arr1 = ["a", 1, true];
    /* создали пустой массив, 
    Вы говорите интерпретатору о создании нового массива времени выполнения. Никакой дополнительной обработки не требуется вообще. */

    var arr2 = new Array(); 
    var arr2 = new Array("a", 1, true);
    /* Вы говорите интерпретатору, я хочу вызвать конструктор "Array" и сгенерировать объект. 
    Затем он просматривает контекст выполнения, чтобы найти конструктор для вызова и вызывает его, создавая ваш массив.*/
    function Array() {
        this.is = 'SPARTA';
    }
    var a = new Array();
    document.getElementById('sparta').innerHTML = a.is + ' СТРАНА';


    let arR = [];
    for (let i = 0; i < 14; i++) {
        arR[i] = i;
    }
    document.getElementById('arr').innerHTML = arR;

});